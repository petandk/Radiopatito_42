// ==UserScript==
// @name        Radiopatito 42
// @namespace   Violentmonkey Scripts
// @match       https://*.intra.42.fr/*
// @grant       GM_setValue
// @grant       GM_getValue
// @version     42.4.4
// @author      you
// @description Boooooooooooooooooooooooored - Now with Favorites, Navigation and Side-by-Side!
// ==/UserScript==

console.log('Radiopatio 42 loaded!');

// ═══════════════════════════════════════════════════════════════════
// 🌍 CONFIGURACIÓN DE IDIOMA / LANGUAGE CONFIGURATION
// ═══════════════════════════════════════════════════════════════════
const TEXTS = {
    // Botones principales / Main buttons
    MAIN_BUTTON: 'Lo mismo pero <span style="font-size: 22px;">grande</span>',
    SIDEBYSIDE_BUTTON: '<span style="font-size: 12px;">Lo mismo pero </span><span style="font-size: 6px;">pequeño</span>',
    NAVIGATION_BUTTON: 'Ir a <span style="font-size: 22px;">Clusters</span>',
    ALL_BUTTON: 'Todo 42 🆎',
    CLUSTER_A_BUTTON: 'Clúster 🅰️',
    CLUSTER_B_BUTTON: 'Clúster 🅱️',
    FAVORITES_BUTTON: '❤️‍🔥 Los panas ❤️‍🔥',

    // Títulos dinámicos / Dynamic titles
    TITLE_USERS: '👨‍💻 patitos 👩‍💻',
    TITLE_FAVORITES: '❤️‍🔥 panas ❤️‍🔥',
    TITLE_FAVORITES_ONLINE: '💚 conectados 💚', // Nuevo texto para panas conectados
    TITLE_CLUSTER_A: ' en Clúster 🅰️',
    TITLE_CLUSTER_B: ' en Clúster 🅱️',
    TITLE_PREFIX: 'Habemos',

    // Botones de favoritos / Favorites buttons
    ADD_FAVORITE: '➕ Añadir pana ➕',
    REMOVE_FAVORITES: '💔 Divorcio 💔',

    // Modal de añadir favorito / Add favorite modal
    ADD_MODAL_TITLE: '❤️‍🔥 Añadir nuevo pana ❤️‍🔥',
    ADD_MODAL_PLACEHOLDER: '¿Cómo se llama tu pana? (login)',
    ADD_MODAL_BUTTON: '❤️ Añadir a los panas ❤️',
    ADD_SUCCESS: '¡{login} añadido a los panas! ❤️‍🔥',
    ADD_ALREADY_EXISTS: '{login} ya está en los panas 😊',
    ADD_ERROR_EMPTY: 'Por favor introduce un login válido 🐣',

    // Modal de eliminar favoritos / Remove favorites modal
    REMOVE_MODAL_TITLE: '💔 Divorcio de panas 💔',
    REMOVE_MODAL_SUBTITLE: 'Marca los panas de los que te quieres divorciar',
    REMOVE_MODAL_BUTTON: '💔 Confirmar divorcios 💔',
    REMOVE_NO_SELECTION: 'No has seleccionado ningún divorcio 😊',
    REMOVE_CONFIRM: '¿Estás seguro de que quieres divorciarte de: {users}? 💔',
    REMOVE_SUCCESS: 'Divorcios completados: {users} 💔',
    REMOVE_NO_FAVORITES: 'No tienes panas para divorciar 💔',

    // Modal de búsqueda / Search modal
    SEARCH_MODAL_TITLE: '🔍 Buscar Patito 🔍',
    SEARCH_PLACEHOLDER: '🐣 A quien coño buscas? maruha! 🐣',
    SEARCH_BUTTON: 'Buscar',
    SEARCH_FOUND: '🎉 ¡Patito encontrado! 🎉',
    SEARCH_NOT_FOUND: '❌ Patito no encontrado ❌',
    SEARCH_ERROR_EMPTY: '🐣 Por favor escribe un login 🐣',
    SEARCH_RANDOM_USER: '🤷‍♂️ Usuario desconocido 🤷‍♀️',
    SEARCH_RANDOM_SUBTITLE: 'Imagen aleatoria de consolación',

    // Estados de usuario / User states
    USER_OFFLINE: '🔌 Offline 🔌',
    USER_OFFLINE_MESSAGE: '❤️‍🔥 Tu pana está offline ❤️‍🔥',
    USER_SLEEPING: '💤 {login} 💤',

    // Errores / Errors
    NO_IMAGES_FOUND: 'No images found!',
    IMAGE_LOAD_ERROR: 'Image failed to load'
};

// ═══════════════════════════════════════════════════════════════════
// 🧭 DETECCIÓN DE PÁGINA / PAGE DETECTION
// ═══════════════════════════════════════════════════════════════════
const isInClustersPage = () => {
    // Debe estar en meta.intra.42.fr Y en la ruta /clusters
    return window.location.hostname === 'meta.intra.42.fr' &&
           (window.location.pathname.includes('/clusters') ||
            window.location.href.includes('/clusters'));
};

// ═══════════════════════════════════════════════════════════════════
// 🔄 FUNCIONALIDAD LADO A LADO / SIDE-BY-SIDE FUNCTIONALITY
// ═══════════════════════════════════════════════════════════════════
let sideBySideActive = false;
let originalStyles = null;

const makeTabPanesSideBySide = () => {
    if (sideBySideActive) {
        // Si ya está activo, revertir
        restoreOriginalLayout();
        return;
    }

    // Find the tab-content div
    const tabContent = document.querySelector('.tab-content');
    const mainContainer = document.querySelector("#main-container");

    if (!tabContent) {
        console.log('No .tab-content found');
        return;
    }

    // Store original styles for restoration
    if (!originalStyles) {
        originalStyles = {
            mainContainer: mainContainer ? mainContainer.style.display : '',
            tabPanes: []
        };
    }

    // Hide main container
    if (mainContainer) {
        mainContainer.style.display = "none";
    }

    // Find all tab-pane elements inside tab-content
    const tabPanes = tabContent.querySelectorAll('.tab-pane');
    if (tabPanes.length !== 2) {
        console.log(`Expected 2 tab panes, found ${tabPanes.length}`);
        return;
    }

    // Store original classes
    tabPanes.forEach((pane, index) => {
        originalStyles.tabPanes[index] = {
            classList: Array.from(pane.classList)
        };
        pane.classList.add('active');
    });

    // Apply CSS styles for side-by-side layout
    const styleId = 'radiopatito-sidebyside-style';
    let existingStyle = document.getElementById(styleId);

    if (!existingStyle) {
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .tab-content {
                display: flex !important;
                gap: 20px; /* Adjust spacing between panes */
            }
            .tab-content .tab-pane {
                flex: 1 !important; /* Equal width for both panes */
                display: block !important; /* Override any display: none */
                opacity: 1 !important; /* Ensure visibility */
                position: relative !important;
            }
            /* Make first tab pane appear on the right */
            .tab-content .tab-pane:first-child {
                order: 2;
            }
            /* Make second tab pane appear on the left */
            .tab-content .tab-pane:last-child {
                order: 1;
            }
            .radiopatito-cluster-label {
                position: sticky !important;
                top: 0 !important;
                z-index: 1000 !important;
                color: #02807c !important;
                text-align: center !important;
                padding: 10px !important;
                font-weight: bold !important;
                font-size: 18px !important;
                margin-bottom: 15px !important;
            }
        `;
        document.head.appendChild(style);
    }

    // Add cluster labels
    tabPanes.forEach((pane, index) => {
        // Remove existing labels first
        const existingLabel = pane.querySelector('.radiopatito-cluster-label');
        if (existingLabel) {
            existingLabel.remove();
        }

        // Create new label
        const label = document.createElement('div');
        label.className = 'radiopatito-cluster-label';

        // First pane (index 0) will be on the right = Cluster A
        // Second pane (index 1) will be on the left = Cluster B
        label.textContent = index === 0 ? 'Clúster 🅰️' : 'Clúster 🅱️';

        // Insert at the beginning of the pane
        pane.insertBefore(label, pane.firstChild);
    });

    sideBySideActive = true;
    console.log('Tab panes are now displayed side by side with first one on the right');
};

const restoreOriginalLayout = () => {
    // Remove custom styles
    const styleElement = document.getElementById('radiopatito-sidebyside-style');
    if (styleElement) {
        styleElement.remove();
    }

    // Remove cluster labels
    document.querySelectorAll('.radiopatito-cluster-label').forEach(label => {
        label.remove();
    });

    // Restore main container
    const mainContainer = document.querySelector("#main-container");
    if (mainContainer && originalStyles) {
        mainContainer.style.display = originalStyles.mainContainer;
    }

    // Restore tab panes classes
    const tabPanes = document.querySelectorAll('.tab-content .tab-pane');
    tabPanes.forEach((pane, index) => {
        if (originalStyles && originalStyles.tabPanes[index]) {
            pane.className = ''; // Clear all classes
            originalStyles.tabPanes[index].classList.forEach(cls => {
                pane.classList.add(cls);
            });
        }
    });

    sideBySideActive = false;
    console.log('Original layout restored');
};

// ═══════════════════════════════════════════════════════════════════
// 💾 GESTIÓN DE FAVORITOS / FAVORITES MANAGEMENT
// ═══════════════════════════════════════════════════════════════════
const FAVORITES_KEY = 'radiopatio_favorites';

const getFavorites = () => {
    try {
        const favs = GM_getValue(FAVORITES_KEY, '[]');
        return JSON.parse(favs);
    } catch (e) {
        console.warn('Error loading favorites:', e);
        return [];
    }
};

const saveFavorites = (favorites) => {
    try {
        GM_setValue(FAVORITES_KEY, JSON.stringify(favorites));
        console.log('Favorites saved:', favorites);
    } catch (e) {
        console.error('Error saving favorites:', e);
    }
};

const addFavorite = (login) => {
    const favorites = getFavorites();
    if (!favorites.includes(login.toLowerCase())) {
        favorites.push(login.toLowerCase());
        saveFavorites(favorites);
        return true;
    }
    return false;
};

const removeFavorites = (loginsToRemove) => {
    const favorites = getFavorites();
    const newFavorites = favorites.filter(fav => !loginsToRemove.includes(fav));
    saveFavorites(newFavorites);
};

// ═══════════════════════════════════════════════════════════════════
// 🧭 FUNCIÓN DE NAVEGACIÓN / NAVIGATION FUNCTION
// ═══════════════════════════════════════════════════════════════════
const navigateToClusters = () => {
    window.location.href = 'https://meta.intra.42.fr/clusters';
};

// ═══════════════════════════════════════════════════════════════════
// 🎯 FUNCIÓN PRINCIPAL / MAIN FUNCTION
// ═══════════════════════════════════════════════════════════════════
setTimeout(() => {
    // Base button styles
    const baseButtonStyle = `
        position: fixed; right: 20px; z-index: 99999;
        background: #474b54; border: 1px solid #666; border-radius: 10px;
        color: #02807c; background-color: #D8636F; font-weight: bold;
        cursor: pointer; box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        transition: all 0.3s ease;
    `;

    // Create main button
    const btn = document.createElement('button');

    // Detectar si estamos en la página de clusters
    if (isInClustersPage()) {
        // Estamos en clusters - botón original
        btn.innerHTML = TEXTS.MAIN_BUTTON;
        btn.onclick = showClustersGrid;

        // Create side-by-side button (smaller, positioned above)
        const sideBySideBtn = document.createElement('button');
        sideBySideBtn.innerHTML = TEXTS.SIDEBYSIDE_BUTTON;
        sideBySideBtn.onclick = makeTabPanesSideBySide;

        // Style the side-by-side button (smaller size, positioned above main button)
        sideBySideBtn.style.cssText = baseButtonStyle + `
            bottom: 80px; /* Position above main button */
            padding: 5px 8px; /* Smaller padding */
            font-size: 10px; /* Smaller font size */
        `;

        // Add hover effects for side-by-side button
        sideBySideBtn.addEventListener('mouseenter', () => {
            sideBySideBtn.style.transform = 'scale(1.05)';
            sideBySideBtn.style.boxShadow = '0 4px 15px rgba(0,0,0,0.4)';
        });

        sideBySideBtn.addEventListener('mouseleave', () => {
            sideBySideBtn.style.transform = 'scale(1)';
            sideBySideBtn.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';
        });

        // Add the side-by-side button to the page
        document.body.appendChild(sideBySideBtn);
    } else {
        // Estamos en otra página - botón de navegación
        btn.innerHTML = TEXTS.NAVIGATION_BUTTON;
        btn.onclick = navigateToClusters;
    }

    // Style the main button
    btn.style.cssText = baseButtonStyle + `
        bottom: 20px;
        padding: 10px 15px;
        font-size: 14px;
    `;

    // Efectos hover para el botón principal
    btn.addEventListener('mouseenter', () => {
        btn.style.transform = 'scale(1.05)';
        btn.style.boxShadow = '0 4px 15px rgba(0,0,0,0.4)';
    });

    btn.addEventListener('mouseleave', () => {
        btn.style.transform = 'scale(1)';
        btn.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';
    });

    document.body.appendChild(btn);

    // Mutation observer for dynamic content (side-by-side functionality)
    if (isInClustersPage()) {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.addedNodes.length > 0) {
                    // Check if new tab-content was added
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === 1 && (node.classList?.contains('tab-content') || node.querySelector?.('.tab-content'))) {
                            if (sideBySideActive) {
                                setTimeout(makeTabPanesSideBySide, 100);
                            }
                        }
                    });
                }
            });
        });
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    function showClustersGrid() {
        // Find images
        const images = Array.from(document.querySelectorAll('image[*|href]')).map(img => ({
            element: img,
            href: img.getAttributeNS('http://www.w3.org/1999/xlink', 'href') ||
                  img.getAttribute('xlink:href') || img.getAttribute('href'),
            login: img.getAttribute('data-tooltip-login') || 'Unknown',
            id: img.getAttribute('id') || 'No ID',
            width: parseFloat(img.getAttribute('width')) || 50,
            height: parseFloat(img.getAttribute('height')) || 50
        })).filter(img => img.href?.trim());

        if (!images.length) {
            alert(TEXTS.NO_IMAGES_FOUND);
            return;
        }

        // Remove existing grid and modals
        document.getElementById('radiopatio-grid')?.remove();
        document.getElementById('search-modal')?.remove();
        document.getElementById('favorites-modal')?.remove();
        document.querySelectorAll('[data-radiopatio-button]').forEach(btn => btn.remove());

        // State management
        let currentFilter = 'all';
        let gridContainer, titleElement, searchBtn, closeBtn, favControlsContainer;

        // Create main container
        const container = document.createElement('div');
        container.id = 'radiopatio-grid';
        container.style.cssText = `
            position: fixed; top: 10px; left: 10px; right: 10px; bottom: 10px;
            background: #474b54; border: 2px solid #666; border-radius: 10px;
            padding: 0px 20px 10px 20px; z-index: 100000; overflow-y: auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        `;

        // Create filter buttons container
        const filterContainer = document.createElement('div');
        filterContainer.style.cssText = `
            display: flex; justify-content: center; gap: 10px; margin-bottom: 15px;
            position: sticky; top: 0; padding: 10px 0; z-index: 100001;
            flex-wrap: wrap;
        `;

        // Create filter buttons
        const createFilterButton = (text, filter, isSpecial = false) => {
            const button = document.createElement('button');
            button.innerHTML = text;
            button.setAttribute('data-filter', filter);
            button.style.cssText = `
                padding: 8px 16px; border: 1px solid #666; border-radius: 6px;
                font-size: 14px; font-weight: bold; cursor: pointer;
                transition: all 0.3s ease; white-space: nowrap;
                ${filter === currentFilter ?
                    (isSpecial ? 'background: #ff69b4; color: #ffffff;' : 'background: #D8636F; color: #02807c;') :
                    'background: #3a3e47; color: #cccccc;'}
            `;

            button.onclick = () => {
                currentFilter = filter;
                updateButtonStyles();
                updateGrid();
            };

            return button;
        };

        const todoBtn = createFilterButton(TEXTS.ALL_BUTTON, 'all');
        const clusterABtn = createFilterButton(TEXTS.CLUSTER_A_BUTTON, 'car');
        const clusterBBtn = createFilterButton(TEXTS.CLUSTER_B_BUTTON, 'cbr');
        const favoritesBtn = createFilterButton(TEXTS.FAVORITES_BUTTON, 'favorites', true);

        filterContainer.appendChild(todoBtn);
        filterContainer.appendChild(clusterABtn);
        filterContainer.appendChild(clusterBBtn);
        filterContainer.appendChild(favoritesBtn);

        // Update button styles based on current filter
        const updateButtonStyles = () => {
            [clusterABtn, clusterBBtn, todoBtn, favoritesBtn].forEach(btn => {
                const btnFilter = btn.getAttribute('data-filter');
                const isActive = btnFilter === currentFilter;
                const isSpecial = btnFilter === 'favorites';

                if (isActive) {
                    btn.style.background = isSpecial ? '#ff69b4' : '#D8636F';
                    btn.style.color = isSpecial ? '#ffffff' : '#02807c';
                } else {
                    btn.style.background = '#3a3e47';
                    btn.style.color = '#cccccc';
                }
            });
        };

        // Create title
        const title = document.createElement('div');
        title.style.cssText = `
            text-align: center; color: #ffffff; font-size: 18px; font-weight: bold;
            margin: 0 0 8px 0; padding: 5px 0; transition: opacity 0.3s ease;
        `;
        titleElement = title;

        // Function to update title based on filter
        const updateTitle = (filteredImages) => {
            let filterText = '';
            let emoji = TEXTS.TITLE_USERS;

            if (currentFilter === 'car') {
                filterText = TEXTS.TITLE_CLUSTER_A;
            } else if (currentFilter === 'cbr') {
                filterText = TEXTS.TITLE_CLUSTER_B;
            } else if (currentFilter === 'favorites') {
                emoji = TEXTS.TITLE_FAVORITES;

                // Contar panas conectados (no offline)
                const onlinePanas = filteredImages.filter(img => !img.isOffline).length;

                // Crear el texto con el formato: "Habemos X ❤️‍🔥 panas ❤️‍🔥 (Y 💚 conectados 💚)"
                if (onlinePanas > 0) {
                    title.textContent = `${TEXTS.TITLE_PREFIX} ${filteredImages.length} ${emoji} (${onlinePanas} ${TEXTS.TITLE_FAVORITES_ONLINE})`;
                } else {
                    title.textContent = `${TEXTS.TITLE_PREFIX} ${filteredImages.length} ${emoji}`;
                }
                return; // Salir temprano para favorites
            }

            title.textContent = `${TEXTS.TITLE_PREFIX} ${filteredImages.length} ${emoji}${filterText}`;
        };

        // Create search button
        searchBtn = document.createElement('button');
        searchBtn.textContent = '🔍';
        searchBtn.setAttribute('data-radiopatio-button', 'search');
        searchBtn.onclick = () => showSearchModal();
        searchBtn.style.cssText = `
            position: fixed; top: 15px; left: 15px; z-index: 100002;
            background: #D8636F; color: #02807c; border: none; border-radius: 50%;
            width: 40px; height: 40px; font-size: 20px; font-weight: bold; cursor: pointer;
        `;

        // Create close button
        closeBtn = document.createElement('button');
        closeBtn.textContent = '×';
        closeBtn.setAttribute('data-radiopatio-button', 'close');
        closeBtn.onclick = () => {
            container.remove();
            searchBtn.remove();
            closeBtn.remove();
            document.getElementById('search-modal')?.remove();
            document.getElementById('favorites-modal')?.remove();
        };
        closeBtn.style.cssText = `
            position: fixed; top: 15px; right: 15px; z-index: 100002;
            background: #D8636F; color: #02807c; border: none; border-radius: 50%;
            width: 40px; height: 40px; font-size: 24px; font-weight: bold; cursor: pointer;
        `;

        // Hide title when scrolling
        let scrollTimeout;
        container.addEventListener('scroll', () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                title.style.opacity = container.scrollTop > 30 ? '0' : '1';
            }, 16);
        });

        // Create favorites controls container
        favControlsContainer = document.createElement('div');
        favControlsContainer.style.cssText = `
            display: none; justify-content: center; gap: 15px; margin-bottom: 20px;
            padding: 15px; border-bottom: 1px solid #666;
        `;

        const addPanaBtn = document.createElement('button');
        addPanaBtn.innerHTML = TEXTS.ADD_FAVORITE;
        addPanaBtn.style.cssText = `
            padding: 10px 20px; background: #4ade80; color: #065f46;
            border: none; border-radius: 6px; font-weight: bold;
            cursor: pointer; font-size: 14px; transition: all 0.3s ease;
        `;

        const divorceBtn = document.createElement('button');
        divorceBtn.innerHTML = TEXTS.REMOVE_FAVORITES;
        divorceBtn.style.cssText = `
            padding: 10px 20px; background: #f87171; color: #7f1d1d;
            border: none; border-radius: 6px; font-weight: bold;
            cursor: pointer; font-size: 14px; transition: all 0.3s ease;
        `;

        // Add hover effects
        addPanaBtn.addEventListener('mouseenter', () => {
            addPanaBtn.style.background = '#22c55e';
            addPanaBtn.style.transform = 'translateY(-2px)';
        });
        addPanaBtn.addEventListener('mouseleave', () => {
            addPanaBtn.style.background = '#4ade80';
            addPanaBtn.style.transform = 'translateY(0)';
        });

        divorceBtn.addEventListener('mouseenter', () => {
            divorceBtn.style.background = '#ef4444';
            divorceBtn.style.transform = 'translateY(-2px)';
        });
        divorceBtn.addEventListener('mouseleave', () => {
            divorceBtn.style.background = '#f87171';
            divorceBtn.style.transform = 'translateY(0)';
        });

        favControlsContainer.appendChild(addPanaBtn);
        favControlsContainer.appendChild(divorceBtn);

        // Create image grid
        const grid = document.createElement('div');
        grid.style.cssText = `
            display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px; padding-top: 10px;
        `;
        gridContainer = grid;

        // Function to filter images based on current filter
        const getFilteredImages = () => {
            if (currentFilter === 'all') {
                return images;
            } else if (currentFilter === 'favorites') {
                const favorites = getFavorites();
                const favoriteImages = [];

                favorites.forEach(favLogin => {
                    const onlineUser = images.find(img =>
                        img.login.toLowerCase() === favLogin.toLowerCase()
                    );

                    if (onlineUser) {
                        favoriteImages.push(onlineUser);
                    } else {
                        favoriteImages.push({
                            href: `https://picsum.photos/300/300?random=${favLogin}`,
                            login: favLogin,
                            id: TEXTS.USER_OFFLINE,
                            width: 20,
                            height: 20,
                            isOffline: true
                        });
                    }
                });

                // Ordenar: conectados primero, luego offline
                return favoriteImages.sort((a, b) => {
                    if (a.isOffline && !b.isOffline) return 1;  // a offline va después
                    if (!a.isOffline && b.isOffline) return -1; // a online va antes
                    return 0; // mantener orden original si ambos tienen el mismo estado
                });
            }
            return images.filter(imgData => imgData.id.toLowerCase().startsWith(currentFilter.toLowerCase()));
        };

        // Function to create image card
        const createImageCard = (imgData) => {
            const { href, login, id, width, height, isOffline } = imgData;

            const card = document.createElement('div');
            card.className = 'radiopatio-card';
            card.style.cssText = `
                border: 1px solid #666; border-radius: 8px; padding: 15px;
                text-align: center; background: #3a3e47; box-shadow: 0 2px 5px rgba(0,0,0,0.3);
                ${isOffline ? 'border-color: #ff69b4; background: #4a3847;' : ''}
            `;

            const link = document.createElement('a');
            if (login !== 'Unknown') {
                link.href = `https://profile-v3.intra.42.fr/users/${login}`;
                link.target = '_blank';
                link.rel = 'noopener noreferrer';
            } else {
                link.href = '#';
                link.style.pointerEvents = 'none';
            }
            link.style.cssText = 'text-decoration: none; display: block;';

            const img = document.createElement('img');
            img.src = href;
            img.alt = `${login}'s profile image`;
            img.loading = 'lazy';
            img.style.cssText = `
                width: ${Math.min(width * 15, 600)}px; height: ${Math.min(height * 15, 600)}px;
                object-fit: contain; border: 2px solid #666; border-radius: 4px;
                background: #2c2f36; ${isOffline ? 'opacity: 0.7; filter: grayscale(20%);' : ''}
            `;

            img.onerror = () => {
                img.style.display = 'none';
                const error = document.createElement('div');
                error.textContent = TEXTS.IMAGE_LOAD_ERROR;
                error.style.cssText = 'color: #ff6b6b; font-size: 14px; padding: 20px;';
                link.appendChild(error);
            };

            const info = document.createElement('div');
            info.style.cssText = 'margin-top: 10px; font-size: 12px; color: #cccccc;';

            if (isOffline) {
                info.innerHTML = `
                    <strong style="font-size: 14px; color: #ff69b4;">${TEXTS.USER_SLEEPING.replace('{login}', login)}</strong><br>
                    <big>${id}</big><br>
                    <small style="color: #ff69b4;">${TEXTS.USER_OFFLINE_MESSAGE}</small>
                `;
            } else {
                info.innerHTML = `
                    <strong style="font-size: 14px; color: #ffffff;">👉 ${login} 👈</strong><br>
                    <big>🖥️ ${id} 🖥️</big>
                `;
            }

            link.appendChild(img);
            card.appendChild(link);
            card.appendChild(info);
            return card;
        };

        // Function to update grid based on current filter
        const updateGrid = () => {
            gridContainer.innerHTML = '';

            // Show/hide favorites controls
            if (currentFilter === 'favorites') {
                favControlsContainer.style.display = 'flex';
            } else {
                favControlsContainer.style.display = 'none';
            }

            const filteredImages = getFilteredImages();
            updateTitle(filteredImages);

            const fragment = document.createDocumentFragment();
            filteredImages.forEach(imgData => {
                const card = createImageCard(imgData);
                fragment.appendChild(card);
            });
            gridContainer.appendChild(fragment);

            console.log(`Radiopatio 42: Updated grid with ${filteredImages.length} images (filter: ${currentFilter})`);
        };

        // Function to show add favorite modal
        const showAddFavoriteModal = () => {
            document.getElementById('favorites-modal')?.remove();

            const modal = document.createElement('div');
            modal.id = 'favorites-modal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                background: rgba(0,0,0,0.8); z-index: 100003;
                display: flex; align-items: center; justify-content: center;
            `;

            const content = document.createElement('div');
            content.style.cssText = `
                background: #474b54; border: 2px solid #666; border-radius: 10px;
                padding: 30px; width: 400px; max-width: 90vw; position: relative;
                box-shadow: 0 4px 20px rgba(0,0,0,0.5);
            `;

            const titleElem = document.createElement('h3');
            titleElem.textContent = TEXTS.ADD_MODAL_TITLE;
            titleElem.style.cssText = `
                color: #ffffff; text-align: center; margin: 0 0 20px 0;
                font-size: 18px;
            `;

            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = TEXTS.ADD_MODAL_PLACEHOLDER;
            input.style.cssText = `
                width: 100%; padding: 12px; border: 1px solid #666;
                border-radius: 6px; background: #3a3e47; color: #ffffff;
                font-size: 16px; box-sizing: border-box;
            `;

            const addButton = document.createElement('button');
            addButton.textContent = TEXTS.ADD_MODAL_BUTTON;
            addButton.style.cssText = `
                width: 100%; margin-top: 15px; padding: 12px;
                background: #4ade80; color: #065f46; border: none;
                border-radius: 6px; font-size: 16px; font-weight: bold;
                cursor: pointer;
            `;

            const resultDiv = document.createElement('div');
            resultDiv.style.cssText = 'margin-top: 15px; text-align: center;';

            const performAdd = () => {
                const login = input.value.trim();
                if (!login) {
                    resultDiv.innerHTML = `<div style="color: #ff6b6b;">${TEXTS.ADD_ERROR_EMPTY}</div>`;
                    return;
                }

                const success = addFavorite(login);
                if (success) {
                    resultDiv.innerHTML = `<div style="color: #4ade80;">${TEXTS.ADD_SUCCESS.replace('{login}', login)}</div>`;
                    input.value = '';
                    setTimeout(() => {
                        modal.remove();
                        updateGrid();
                    }, 1500);
                } else {
                    resultDiv.innerHTML = `<div style="color: #fbbf24;">${TEXTS.ADD_ALREADY_EXISTS.replace('{login}', login)}</div>`;
                }
            };

            const closeModal = () => modal.remove();

            addButton.onclick = performAdd;
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performAdd();
                }
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) closeModal();
            });

            const closeBtn = document.createElement('button');
            closeBtn.textContent = '×';
            closeBtn.onclick = closeModal;
            closeBtn.style.cssText = `
                position: absolute; top: 10px; right: 15px;
                background: none; border: none; color: #cccccc;
                font-size: 24px; cursor: pointer; padding: 0;
            `;

            content.appendChild(closeBtn);
            content.appendChild(titleElem);
            content.appendChild(input);
            content.appendChild(addButton);
            content.appendChild(resultDiv);
            modal.appendChild(content);
            document.body.appendChild(modal);

            setTimeout(() => {
                input.focus();
            }, 100);
        };

        // Function to show remove favorites modal
        const showRemoveFavoritesModal = () => {
            const favorites = getFavorites();
            if (favorites.length === 0) {
                alert(TEXTS.REMOVE_NO_FAVORITES);
                return;
            }

            document.getElementById('favorites-modal')?.remove();

            const modal = document.createElement('div');
            modal.id = 'favorites-modal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                background: rgba(0,0,0,0.8); z-index: 100003;
                display: flex; align-items: center; justify-content: center;
            `;

            const content = document.createElement('div');
            content.style.cssText = `
                background: #474b54; border: 2px solid #666; border-radius: 10px;
                padding: 30px; width: 450px; max-width: 90vw; position: relative;
                box-shadow: 0 4px 20px rgba(0,0,0,0.5); max-height: 80vh; overflow-y: auto;
            `;

            const titleElem = document.createElement('h3');
            titleElem.textContent = TEXTS.REMOVE_MODAL_TITLE;
            titleElem.style.cssText = `
                color: #ffffff; text-align: center; margin: 0 0 20px 0;
                font-size: 18px;
            `;

            const subtitle = document.createElement('p');
            subtitle.textContent = TEXTS.REMOVE_MODAL_SUBTITLE;
            subtitle.style.cssText = `
                color: #cccccc; text-align: center; margin: 0 0 20px 0;
                font-size: 14px;
            `;

            const checkboxContainer = document.createElement('div');
            checkboxContainer.style.cssText = 'margin-bottom: 20px;';

            const checkboxes = [];
            favorites.forEach((login, index) => {
                const checkboxDiv = document.createElement('div');
                checkboxDiv.style.cssText = `
                    display: flex; align-items: center; margin-bottom: 12px;
                    padding: 8px; border-radius: 4px; background: #3a3e47;
                `;

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = `fav-${index}`;
                checkbox.value = login;
                checkbox.checked = false;
                checkbox.style.cssText = `
                    margin-right: 10px; width: 18px; height: 18px;
                `;

                const label = document.createElement('label');
                label.htmlFor = `fav-${index}`;
                label.textContent = `❤️‍🔥 ${login}`;
                label.style.cssText = `
                    color: #ffffff; font-size: 16px; cursor: pointer;
                    flex-grow: 1;
                `;

                checkboxes.push(checkbox);
                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                checkboxContainer.appendChild(checkboxDiv);
            });

            const divorceButton = document.createElement('button');
            divorceButton.textContent = TEXTS.REMOVE_MODAL_BUTTON;
            divorceButton.style.cssText = `
                width: 100%; padding: 12px; background: #f87171; color: #7f1d1d;
                border: none; border-radius: 6px; font-size: 16px; font-weight: bold;
                cursor: pointer;
            `;

            const performDivorce = () => {
                const toRemove = checkboxes
                    .filter(cb => cb.checked)
                    .map(cb => cb.value);

                if (toRemove.length === 0) {
                    alert(TEXTS.REMOVE_NO_SELECTION);
                    return;
                }

                const confirmMsg = TEXTS.REMOVE_CONFIRM.replace('{users}', toRemove.join(', '));
                if (confirm(confirmMsg)) {
                    removeFavorites(toRemove);
                    alert(TEXTS.REMOVE_SUCCESS.replace('{users}', toRemove.join(', ')));
                    modal.remove();
                    updateGrid();
                }
            };

            const closeModal = () => modal.remove();

            divorceButton.onclick = performDivorce;
            modal.addEventListener('click', (e) => {
                if (e.target === modal) closeModal();
            });

            const closeBtn = document.createElement('button');
            closeBtn.textContent = '×';
            closeBtn.onclick = closeModal;
            closeBtn.style.cssText = `
                position: absolute; top: 10px; right: 15px;
                background: none; border: none; color: #cccccc;
                font-size: 24px; cursor: pointer; padding: 0;
            `;

            content.appendChild(closeBtn);
            content.appendChild(titleElem);
            content.appendChild(subtitle);
            content.appendChild(checkboxContainer);
            content.appendChild(divorceButton);
            modal.appendChild(content);
            document.body.appendChild(modal);
        };

        // Function to show search modal
        const showSearchModal = () => {
            document.getElementById('search-modal')?.remove();

            const searchModal = document.createElement('div');
            searchModal.id = 'search-modal';
            searchModal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                background: rgba(0,0,0,0.8); z-index: 100003;
                display: flex; align-items: center; justify-content: center;
            `;

            const searchContent = document.createElement('div');
            searchContent.style.cssText = `
                background: #474b54; border: 2px solid #666; border-radius: 10px;
                padding: 30px; width: 400px; max-width: 90vw; position: relative;
                box-shadow: 0 4px 20px rgba(0,0,0,0.5);
            `;

            const searchTitle = document.createElement('h3');
            searchTitle.textContent = TEXTS.SEARCH_MODAL_TITLE;
            searchTitle.style.cssText = `
                color: #ffffff; text-align: center; margin: 0 0 20px 0;
                font-size: 18px;
            `;

            const searchInput = document.createElement('input');
            searchInput.type = 'text';
            searchInput.placeholder = TEXTS.SEARCH_PLACEHOLDER;
            searchInput.style.cssText = `
                width: 100%; padding: 12px; border: 1px solid #666;
                border-radius: 6px; background: #3a3e47; color: #ffffff;
                font-size: 16px; box-sizing: border-box;
            `;

            const searchButton = document.createElement('button');
            searchButton.textContent = TEXTS.SEARCH_BUTTON;
            searchButton.style.cssText = `
                width: 100%; margin-top: 15px; padding: 12px;
                background: #D8636F; color: #02807c; border: none;
                border-radius: 6px; font-size: 16px; font-weight: bold;
                cursor: pointer;
            `;

            const resultDiv = document.createElement('div');
            resultDiv.style.cssText = 'margin-top: 20px;';

            const performSearch = () => {
                const searchTerm = searchInput.value.trim().toLowerCase();
                if (!searchTerm) {
                    resultDiv.innerHTML = `<div style="color: #ff6b6b; text-align: center;">${TEXTS.SEARCH_ERROR_EMPTY}</div>`;
                    return;
                }

                resultDiv.innerHTML = '';

                const foundUser = images.find(img =>
                    img.login.toLowerCase() === searchTerm
                );

                if (foundUser) {
                    const userCard = createImageCard(foundUser);
                    userCard.style.cssText += ' margin: 0 auto; max-width: 300px;';

                    const foundText = document.createElement('div');
                    foundText.textContent = TEXTS.SEARCH_FOUND;
                    foundText.style.cssText = `
                        color: #4ade80; text-align: center; margin-bottom: 15px;
                        font-weight: bold; font-size: 16px;
                    `;

                    resultDiv.appendChild(foundText);
                    resultDiv.appendChild(userCard);
                } else {
                    const notFoundText = document.createElement('div');
                    notFoundText.textContent = TEXTS.SEARCH_NOT_FOUND;
                    notFoundText.style.cssText = `
                        color: #ff6b6b; text-align: center; margin-bottom: 15px;
                        font-weight: bold; font-size: 16px;
                    `;

                    const randomImageCard = document.createElement('div');
                    randomImageCard.style.cssText = `
                        border: 1px solid #666; border-radius: 8px; padding: 15px;
                        text-align: center; background: #3a3e47; box-shadow: 0 2px 5px rgba(0,0,0,0.3);
                        margin: 0 auto; max-width: 250px;
                    `;

                    const randomImg = document.createElement('img');
                    randomImg.src = `https://picsum.photos/200?random=${Date.now()}`;
                    randomImg.alt = 'Random image';
                    randomImg.loading = 'lazy';
                    randomImg.style.cssText = `
                        width: 200px; height: 200px; object-fit: cover;
                        border: 2px solid #666; border-radius: 4px;
                    `;

                    const randomInfo = document.createElement('div');
                    randomInfo.style.cssText = 'margin-top: 10px; font-size: 14px; color: #cccccc;';
                    randomInfo.innerHTML = `
                        <strong style="color: #ffffff;">${TEXTS.SEARCH_RANDOM_USER}</strong><br>
                        <em>${TEXTS.SEARCH_RANDOM_SUBTITLE}</em>
                    `;

                    randomImageCard.appendChild(randomImg);
                    randomImageCard.appendChild(randomInfo);

                    resultDiv.appendChild(notFoundText);
                    resultDiv.appendChild(randomImageCard);
                }
            };

            const closeSearchModal = () => {
                searchModal.remove();
            };

            searchButton.onclick = performSearch;
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performSearch();
                }
            });

            searchModal.addEventListener('click', (e) => {
                if (e.target === searchModal) {
                    closeSearchModal();
                }
            });

            const closeSearchBtn = document.createElement('button');
            closeSearchBtn.textContent = '×';
            closeSearchBtn.onclick = closeSearchModal;
            closeSearchBtn.style.cssText = `
                position: absolute; top: 10px; right: 15px;
                background: none; border: none; color: #cccccc;
                font-size: 24px; cursor: pointer; padding: 0;
            `;

            const handleKeydown = (e) => {
                if (e.key === 'Escape') {
                    closeSearchModal();
                    document.removeEventListener('keydown', handleKeydown);
                }
            };
            document.addEventListener('keydown', handleKeydown);

            searchContent.appendChild(closeSearchBtn);
            searchContent.appendChild(searchTitle);
            searchContent.appendChild(searchInput);
            searchContent.appendChild(searchButton);
            searchContent.appendChild(resultDiv);
            searchModal.appendChild(searchContent);
            document.body.appendChild(searchModal);

            setTimeout(() => {
                searchInput.focus();
                searchInput.select();
            }, 100);
        };

        // Assign click handlers after all functions are defined
        addPanaBtn.onclick = () => showAddFavoriteModal();
        divorceBtn.onclick = () => showRemoveFavoritesModal();

        // Build initial UI
        container.appendChild(filterContainer);
        container.appendChild(title);
        container.appendChild(favControlsContainer);
        container.appendChild(grid);
        document.body.appendChild(container);
        document.body.appendChild(closeBtn);
        document.body.appendChild(searchBtn);

        // Initialize with all images
        updateGrid();

        console.log(`Radiopatio 42: Initialized with ${images.length} total images`);
    }
}, 1000);
