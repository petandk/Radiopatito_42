// ==UserScript==
// @name        Radiopatito 42 Mobile
// @namespace   Violentmonkey Scripts
// @match       https://*.intra.42.fr/*
// @grant       none
// @version     42.4.4-mobile
// @author      you
// @description Boooooooooooooooooooooooored - Mobile version without favorites
// ==/UserScript==

console.log('Radiopatio 42 Mobile loaded!');

const TEXTS = {
    MAIN_BUTTON: 'Lo mismo pero <span style="font-size: 22px;">grande</span>',
    SIDEBYSIDE_BUTTON: 'Back 2 default',
    NAVIGATION_BUTTON: 'Ir a <span style="font-size: 22px;">Clusters</span>',
    ALL_BUTTON: 'Todo 42 🆎',
    CLUSTER_A_BUTTON: 'Clúster 🅰️',
    CLUSTER_B_BUTTON: 'Clúster 🅱️',
    TITLE_USERS: '👨‍💻 patitos 👩‍💻',
    TITLE_CLUSTER_A: ' en Clúster 🅰️',
    TITLE_CLUSTER_B: ' en Clúster 🅱️',
    TITLE_PREFIX: 'Habemos',
    SEARCH_MODAL_TITLE: '🔍 Buscar Patito 🔍',
    SEARCH_PLACEHOLDER: '🐣 A quien coño buscas? maruha! 🐣',
    SEARCH_BUTTON: 'Buscar',
    SEARCH_FOUND: '🎉 ¡Patito encontrado! 🎉',
    SEARCH_NOT_FOUND: '❌ Patito no encontrado ❌',
    SEARCH_ERROR_EMPTY: '🐣 Por favor escribe un login 🐣',
    SEARCH_RANDOM_USER: '🤷‍♂️ Usuario desconocido 🤷‍♀️',
    SEARCH_RANDOM_SUBTITLE: 'Imagen aleatoria de consolación',
    NO_IMAGES_FOUND: 'No images found!',
    IMAGE_LOAD_ERROR: 'Image failed to load'
};

const isInClustersPage = () => {
    return window.location.hostname === 'meta.intra.42.fr' &&
           (window.location.pathname.includes('/clusters') ||
            window.location.href.includes('/clusters'));
};

let sideBySideActive = false;
let originalStyles = null;

const makeTabPanesSideBySide = () => {
    if (sideBySideActive) {
        restoreOriginalLayout();
        return;
    }

    const tabContent = document.querySelector('.tab-content');
    const mainContainer = document.querySelector("#main-container");

    if (!tabContent) {
        console.log('No .tab-content found');
        return;
    }

    if (!originalStyles) {
        originalStyles = {
            mainContainer: mainContainer ? mainContainer.style.display : '',
            tabPanes: []
        };
    }

    if (mainContainer) {
        mainContainer.style.display = "none";
    }

    const tabPanes = tabContent.querySelectorAll('.tab-pane');
    if (tabPanes.length !== 2) {
        console.log('Expected 2 tab panes, found ' + tabPanes.length);
        return;
    }

    tabPanes.forEach((pane, index) => {
        originalStyles.tabPanes[index] = {
            classList: Array.from(pane.classList)
        };
        pane.classList.add('active');
    });

    const styleId = 'radiopatito-sidebyside-style';
    let existingStyle = document.getElementById(styleId);

    if (!existingStyle) {
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .tab-content {
                display: flex !important;
                gap: 10px !important;
                height: 100vh !important;
                overflow: hidden !important;
            }
            .tab-content .tab-pane {
                flex: 1 !important;
                display: block !important;
                opacity: 1 !important;
                position: relative !important;
                overflow-y: auto !important;
                height: 100% !important;
                transform: scale(0.85) !important;
                transform-origin: top left !important;
                width: 117.647% !important;
            }
            .tab-content .tab-pane:first-child {
                order: 2;
            }
            .tab-content .tab-pane:last-child {
                order: 1;
            }
            .radiopatito-cluster-label {
                position: sticky !important;
                top: 0 !important;
                z-index: 1000 !important;
                color: #02807c !important;
                text-align: center !important;
                padding: 5px !important;
                font-weight: bold !important;
                font-size: 14px !important;
                margin-bottom: 10px !important;
                background: rgba(71, 75, 84, 0.9) !important;
                backdrop-filter: blur(5px) !important;
            }
            body.radiopatito-sidebyside {
                overflow: hidden !important;
            }
        `;
        document.head.appendChild(style);
    }

    document.body.classList.add('radiopatito-sidebyside');

    tabPanes.forEach((pane, index) => {
        const existingLabel = pane.querySelector('.radiopatito-cluster-label');
        if (existingLabel) {
            existingLabel.remove();
        }

        const label = document.createElement('div');
        label.className = 'radiopatito-cluster-label';
        label.textContent = index === 0 ? 'Clúster 🅰️' : 'Clúster 🅱️';
        pane.insertBefore(label, pane.firstChild);
    });

    sideBySideActive = true;
    console.log('Tab panes are now displayed side by side');
};

const restoreOriginalLayout = () => {
    const styleElement = document.getElementById('radiopatito-sidebyside-style');
    if (styleElement) {
        styleElement.remove();
    }

    document.body.classList.remove('radiopatito-sidebyside');

    document.querySelectorAll('.radiopatito-cluster-label').forEach(label => {
        label.remove();
    });

    const mainContainer = document.querySelector("#main-container");
    if (mainContainer && originalStyles) {
        mainContainer.style.display = originalStyles.mainContainer;
    }

    const tabPanes = document.querySelectorAll('.tab-content .tab-pane');
    tabPanes.forEach((pane, index) => {
        if (originalStyles && originalStyles.tabPanes[index]) {
            pane.className = '';
            originalStyles.tabPanes[index].classList.forEach(cls => {
                pane.classList.add(cls);
            });
        }
    });

    sideBySideActive = false;
    console.log('Original layout restored');
};

const autoEnableSideBySide = () => {
    if (isInClustersPage() && !sideBySideActive) {
        const tabContent = document.querySelector('.tab-content');
        if (tabContent) {
            makeTabPanesSideBySide();
            console.log('Auto-enabled side-by-side mode');
        } else {
            setTimeout(autoEnableSideBySide, 50);
        }
    }
};

const navigateToClusters = () => {
    window.location.href = 'https://meta.intra.42.fr/clusters';
};

const showClustersGrid = () => {
    const images = Array.from(document.querySelectorAll('image[*|href]')).map(img => ({
        element: img,
        href: img.getAttributeNS('http://www.w3.org/1999/xlink', 'href') ||
              img.getAttribute('xlink:href') || img.getAttribute('href'),
        login: img.getAttribute('data-tooltip-login') || 'Unknown',
        id: img.getAttribute('id') || 'No ID',
        width: parseFloat(img.getAttribute('width')) || 50,
        height: parseFloat(img.getAttribute('height')) || 50
    })).filter(img => img.href && img.href.trim());

    if (!images.length) {
        alert(TEXTS.NO_IMAGES_FOUND);
        return;
    }

    document.getElementById('radiopatio-grid') && document.getElementById('radiopatio-grid').remove();
    document.getElementById('search-modal') && document.getElementById('search-modal').remove();
    document.querySelectorAll('[data-radiopatio-button]').forEach(btn => btn.remove());

    let currentFilter = 'all';
    let gridContainer, titleElement, searchBtn, closeBtn;

    const container = document.createElement('div');
    container.id = 'radiopatio-grid';
    container.style.cssText = 'position: fixed; top: 10px; left: 10px; right: 10px; bottom: 10px; background: #474b54; border: 2px solid #666; border-radius: 10px; padding: 0px 20px 10px 20px; z-index: 100000; overflow-y: auto; box-shadow: 0 4px 20px rgba(0,0,0,0.5);';

    const filterContainer = document.createElement('div');
    filterContainer.style.cssText = 'display: flex; justify-content: center; gap: 10px; margin-bottom: 15px; position: sticky; top: 0; padding: 10px 0; z-index: 100001; flex-wrap: wrap;';

    const createFilterButton = (text, filter) => {
        const button = document.createElement('button');
        button.innerHTML = text;
        button.setAttribute('data-filter', filter);
        button.style.cssText = 'padding: 8px 16px; border: 1px solid #666; border-radius: 6px; font-size: 14px; font-weight: bold; cursor: pointer; transition: all 0.3s ease; white-space: nowrap;' + (filter === currentFilter ? 'background: #D8636F; color: #02807c;' : 'background: #3a3e47; color: #cccccc;');

        button.onclick = () => {
            currentFilter = filter;
            updateButtonStyles();
            updateGrid();
        };

        return button;
    };

    const todoBtn = createFilterButton(TEXTS.ALL_BUTTON, 'all');
    const clusterABtn = createFilterButton(TEXTS.CLUSTER_A_BUTTON, 'car');
    const clusterBBtn = createFilterButton(TEXTS.CLUSTER_B_BUTTON, 'cbr');

    filterContainer.appendChild(todoBtn);
    filterContainer.appendChild(clusterABtn);
    filterContainer.appendChild(clusterBBtn);

    const updateButtonStyles = () => {
        [clusterABtn, clusterBBtn, todoBtn].forEach(btn => {
            const btnFilter = btn.getAttribute('data-filter');
            const isActive = btnFilter === currentFilter;

            if (isActive) {
                btn.style.background = '#D8636F';
                btn.style.color = '#02807c';
            } else {
                btn.style.background = '#3a3e47';
                btn.style.color = '#cccccc';
            }
        });
    };

    const title = document.createElement('div');
    title.style.cssText = 'text-align: center; color: #ffffff; font-size: 18px; font-weight: bold; margin: 0 0 8px 0; padding: 5px 0; transition: opacity 0.3s ease;';
    titleElement = title;

    const updateTitle = (filteredImages) => {
        let filterText = '';
        let emoji = TEXTS.TITLE_USERS;

        if (currentFilter === 'car') {
            filterText = TEXTS.TITLE_CLUSTER_A;
        } else if (currentFilter === 'cbr') {
            filterText = TEXTS.TITLE_CLUSTER_B;
        }

        title.textContent = TEXTS.TITLE_PREFIX + ' ' + filteredImages.length + ' ' + emoji + filterText;
    };

    searchBtn = document.createElement('button');
    searchBtn.textContent = '🔍';
    searchBtn.setAttribute('data-radiopatio-button', 'search');
    searchBtn.onclick = () => showSearchModal();
    searchBtn.style.cssText = 'position: fixed; top: 15px; left: 15px; z-index: 100002; background: #D8636F; color: #02807c; border: none; border-radius: 50%; width: 40px; height: 40px; font-size: 20px; font-weight: bold; cursor: pointer;';

    closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.setAttribute('data-radiopatio-button', 'close');
    closeBtn.onclick = () => {
        container.remove();
        searchBtn.remove();
        closeBtn.remove();
        document.getElementById('search-modal') && document.getElementById('search-modal').remove();
    };
    closeBtn.style.cssText = 'position: fixed; top: 15px; right: 15px; z-index: 100002; background: #D8636F; color: #02807c; border: none; border-radius: 50%; width: 40px; height: 40px; font-size: 24px; font-weight: bold; cursor: pointer;';

    let scrollTimeout;
    container.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            title.style.opacity = container.scrollTop > 30 ? '0' : '1';
        }, 16);
    });

    const grid = document.createElement('div');
    grid.style.cssText = 'display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px; padding-top: 10px;';
    gridContainer = grid;

    const getFilteredImages = () => {
        if (currentFilter === 'all') {
            return images;
        }
        return images.filter(imgData => imgData.id.toLowerCase().startsWith(currentFilter.toLowerCase()));
    };

    const createImageCard = (imgData) => {
        const card = document.createElement('div');
        card.className = 'radiopatio-card';
        card.style.cssText = 'border: 1px solid #666; border-radius: 8px; padding: 15px; text-align: center; background: #3a3e47; box-shadow: 0 2px 5px rgba(0,0,0,0.3);';

        const link = document.createElement('a');
        if (imgData.login !== 'Unknown') {
            link.href = 'https://profile-v3.intra.42.fr/users/' + imgData.login;
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
        } else {
            link.href = '#';
            link.style.pointerEvents = 'none';
        }
        link.style.cssText = 'text-decoration: none; display: block;';

        const img = document.createElement('img');
        img.src = imgData.href;
        img.alt = imgData.login + "'s profile image";
        img.loading = 'lazy';
        img.style.cssText = 'width: ' + Math.min(imgData.width * 15, 600) + 'px; height: ' + Math.min(imgData.height * 15, 600) + 'px; object-fit: contain; border: 2px solid #666; border-radius: 4px; background: #2c2f36;';

        img.onerror = () => {
            img.style.display = 'none';
            const error = document.createElement('div');
            error.textContent = TEXTS.IMAGE_LOAD_ERROR;
            error.style.cssText = 'color: #ff6b6b; font-size: 14px; padding: 20px;';
            link.appendChild(error);
        };

        const info = document.createElement('div');
        info.style.cssText = 'margin-top: 10px; font-size: 12px; color: #cccccc;';
        info.innerHTML = '<strong style="font-size: 14px; color: #ffffff;">👉 ' + imgData.login + ' 👈</strong><br><big>🖥️ ' + imgData.id + ' 🖥️</big>';

        link.appendChild(img);
        card.appendChild(link);
        card.appendChild(info);
        return card;
    };

    const updateGrid = () => {
        gridContainer.innerHTML = '';
        const filteredImages = getFilteredImages();
        updateTitle(filteredImages);

        const fragment = document.createDocumentFragment();
        filteredImages.forEach(imgData => {
            const card = createImageCard(imgData);
            fragment.appendChild(card);
        });
        gridContainer.appendChild(fragment);

        console.log('Radiopatio 42: Updated grid with ' + filteredImages.length + ' images (filter: ' + currentFilter + ')');
    };

    const showSearchModal = () => {
        document.getElementById('search-modal') && document.getElementById('search-modal').remove();

        const searchModal = document.createElement('div');
        searchModal.id = 'search-modal';
        searchModal.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.8); z-index: 100003; display: flex; align-items: center; justify-content: center;';

        const searchContent = document.createElement('div');
        searchContent.style.cssText = 'background: #474b54; border: 2px solid #666; border-radius: 10px; padding: 30px; width: 400px; max-width: 90vw; position: relative; box-shadow: 0 4px 20px rgba(0,0,0,0.5);';

        const searchTitle = document.createElement('h3');
        searchTitle.textContent = TEXTS.SEARCH_MODAL_TITLE;
        searchTitle.style.cssText = 'color: #ffffff; text-align: center; margin: 0 0 20px 0; font-size: 18px;';

        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = TEXTS.SEARCH_PLACEHOLDER;
        searchInput.style.cssText = 'width: 100%; padding: 12px; border: 1px solid #666; border-radius: 6px; background: #3a3e47; color: #ffffff; font-size: 16px; box-sizing: border-box;';

        const searchButton = document.createElement('button');
        searchButton.textContent = TEXTS.SEARCH_BUTTON;
        searchButton.style.cssText = 'width: 100%; margin-top: 15px; padding: 12px; background: #D8636F; color: #02807c; border: none; border-radius: 6px; font-size: 16px; font-weight: bold; cursor: pointer;';

        const resultDiv = document.createElement('div');
        resultDiv.style.cssText = 'margin-top: 20px;';

        const performSearch = () => {
            const searchTerm = searchInput.value.trim().toLowerCase();
            if (!searchTerm) {
                resultDiv.innerHTML = '<div style="color: #ff6b6b; text-align: center;">' + TEXTS.SEARCH_ERROR_EMPTY + '</div>';
                return;
            }

            resultDiv.innerHTML = '';

            const foundUser = images.find(img => img.login.toLowerCase() === searchTerm);

            if (foundUser) {
                const userCard = createImageCard(foundUser);
                userCard.style.cssText += ' margin: 0 auto; max-width: 300px;';

                const foundText = document.createElement('div');
                foundText.textContent = TEXTS.SEARCH_FOUND;
                foundText.style.cssText = 'color: #4ade80; text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 16px;';

                resultDiv.appendChild(foundText);
                resultDiv.appendChild(userCard);
            } else {
                const notFoundText = document.createElement('div');
                notFoundText.textContent = TEXTS.SEARCH_NOT_FOUND;
                notFoundText.style.cssText = 'color: #ff6b6b; text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 16px;';

                const randomImageCard = document.createElement('div');
                randomImageCard.style.cssText = 'border: 1px solid #666; border-radius: 8px; padding: 15px; text-align: center; background: #3a3e47; box-shadow: 0 2px 5px rgba(0,0,0,0.3); margin: 0 auto; max-width: 250px;';

                const randomImg = document.createElement('img');
                randomImg.src = 'https://picsum.photos/200?random=' + Date.now();
                randomImg.alt = 'Random image';
                randomImg.loading = 'lazy';
                randomImg.style.cssText = 'width: 200px; height: 200px; object-fit: cover; border: 2px solid #666; border-radius: 4px;';

                const randomInfo = document.createElement('div');
                randomInfo.style.cssText = 'margin-top: 10px; font-size: 14px; color: #cccccc;';
                randomInfo.innerHTML = '<strong style="color: #ffffff;">' + TEXTS.SEARCH_RANDOM_USER + '</strong><br><em>' + TEXTS.SEARCH_RANDOM_SUBTITLE + '</em>';

                randomImageCard.appendChild(randomImg);
                randomImageCard.appendChild(randomInfo);

                resultDiv.appendChild(notFoundText);
                resultDiv.appendChild(randomImageCard);
            }
        };

        const closeSearchModal = () => {
            searchModal.remove();
        };

        searchButton.onclick = performSearch;
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

        searchModal.addEventListener('click', (e) => {
            if (e.target === searchModal) {
                closeSearchModal();
            }
        });

        const closeSearchBtn = document.createElement('button');
        closeSearchBtn.textContent = '×';
        closeSearchBtn.onclick = closeSearchModal;
        closeSearchBtn.style.cssText = 'position: absolute; top: 10px; right: 15px; background: none; border: none; color: #cccccc; font-size: 24px; cursor: pointer; padding: 0;';

        const handleKeydown = (e) => {
            if (e.key === 'Escape') {
                closeSearchModal();
                document.removeEventListener('keydown', handleKeydown);
            }
        };
        document.addEventListener('keydown', handleKeydown);

        searchContent.appendChild(closeSearchBtn);
        searchContent.appendChild(searchTitle);
        searchContent.appendChild(searchInput);
        searchContent.appendChild(searchButton);
        searchContent.appendChild(resultDiv);
        searchModal.appendChild(searchContent);
        document.body.appendChild(searchModal);

        setTimeout(() => {
            searchInput.focus();
            searchInput.select();
        }, 100);
    };

    container.appendChild(filterContainer);
    container.appendChild(title);
    container.appendChild(grid);
    document.body.appendChild(container);
    document.body.appendChild(closeBtn);
    document.body.appendChild(searchBtn);

    updateGrid();

    console.log('Radiopatio 42: Initialized with ' + images.length + ' total images');
};

const initializeScript = () => {
    if (isInClustersPage()) {
        autoEnableSideBySide();
    }

    const baseButtonStyle = 'position: fixed; right: 20px; z-index: 99999; background: #474b54; border: 1px solid #666; border-radius: 10px; color: #02807c; background-color: #D8636F; font-weight: bold; cursor: pointer; box-shadow: 0 2px 10px rgba(0,0,0,0.3); transition: all 0.3s ease;';

    const btn = document.createElement('button');

    if (isInClustersPage()) {
        btn.innerHTML = TEXTS.MAIN_BUTTON;
        btn.onclick = showClustersGrid;

        const sideBySideBtn = document.createElement('button');
        sideBySideBtn.innerHTML = TEXTS.SIDEBYSIDE_BUTTON;
        sideBySideBtn.onclick = makeTabPanesSideBySide;
        sideBySideBtn.style.cssText = baseButtonStyle + 'bottom: 80px; padding: 5px 8px; font-size: 10px;';

        sideBySideBtn.addEventListener('mouseenter', () => {
            sideBySideBtn.style.transform = 'scale(1.05)';
            sideBySideBtn.style.boxShadow = '0 4px 15px rgba(0,0,0,0.4)';
        });

        sideBySideBtn.addEventListener('mouseleave', () => {
            sideBySideBtn.style.transform = 'scale(1)';
            sideBySideBtn.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';
        });

        document.body.appendChild(sideBySideBtn);
    } else {
        btn.innerHTML = TEXTS.NAVIGATION_BUTTON;
        btn.onclick = navigateToClusters;
    }

    btn.style.cssText = baseButtonStyle + 'bottom: 20px; padding: 10px 15px; font-size: 14px;';

    btn.addEventListener('mouseenter', () => {
        btn.style.transform = 'scale(1.05)';
        btn.style.boxShadow = '0 4px 15px rgba(0,0,0,0.4)';
    });

    btn.addEventListener('mouseleave', () => {
        btn.style.transform = 'scale(1)';
        btn.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';
    });

    document.body.appendChild(btn);

    if (isInClustersPage()) {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.addedNodes.length > 0) {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === 1 && (node.classList && node.classList.contains('tab-content') || node.querySelector && node.querySelector('.tab-content'))) {
                            if (!sideBySideActive) {
                                makeTabPanesSideBySide();
                            }
                        }
                    });
                }
            });
        });
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
};

if (isInClustersPage()) {
    autoEnableSideBySide();
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        if (isInClustersPage()) {
            autoEnableSideBySide();
        }
    });
} else {
    if (isInClustersPage()) {
        autoEnableSideBySide();
    }
}

initializeScript();

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeScript);
} else {
    setTimeout(initializeScript, 100);
}
